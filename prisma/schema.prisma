// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model Store {
  id String @id @default(uuid())
  name String 
  userId String
  billboards Billboard[] @relation("storeToBillboard")
  caterories Category[] @relation("storeToCategory")
  orders Order[] @relation("storeToOrder")
  sizes Size[] @relation("storeToSize")
  colors Color[] @relation("storeToColor")
  products Product[] @relation("storeToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id String @id @default(uuid()) 
  storeId String
  store Store @relation("storeToBillboard", fields: [storeId], references: [id])
  categories Category[]
  label String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}
model Category {
  id String @id @default(uuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId String
  store Store @relation("storeToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  products Product[] @relation("categoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  storeId String 
  store Store @relation("storeToSize", fields: [storeId], references: [id])
  products Product[]
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}
model Color {
  id String @id @default(uuid())
  storeId String 
  store Store @relation("storeToColor", fields: [storeId], references: [id])
  products Product[]
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}
model Product {
  id String @id @default(uuid())
  name String
  price Decimal
  isFeatured Boolean
  isAchieved Boolean
  images Image[]
  orderItem OrderItem[]
  storeId String
  store Store @relation("storeToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("categoryToProduct", fields: [categoryId], references: [id] )
  sizeId String
  size Size @relation(fields: [sizeId], references: [id])
  colorId String
  color Color @relation(fields: [colorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id String @id @default(uuid())
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}
model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("storeToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}


model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}